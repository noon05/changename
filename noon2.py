import asyncio
import os
import random
import logging
from typing import Optional

import aiohttp
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.types import BusinessConnection
from aiogram.methods.set_business_account_name import SetBusinessAccountName

load_dotenv()

class Config:
    API_TOKEN = os.getenv("BOT_TOKEN")
    BASE_NICK = os.getenv("BASE_NICK", "noon")
    MIN_INTERVAL = 2.0
    MAX_INTERVAL = 15.0
    INTERVAL_STEP = 0.2
    
    if not API_TOKEN:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
)
logger = logging.getLogger(__name__)

class NickGenerator:
    UNICODE_REPLACEMENTS = {
        'a': ['–∞', 'Œ±', 'ƒÖ', '√§', '√†', '√°', '√¢', '√£', '√•', 'ƒÅ', '‚àÜ', '‚ñ≤'],
        'e': ['–µ', 'Œµ', 'ƒô', '√´', '√®', '√©', '√™', 'ƒì', '‚Ç¨', '‚àë'],
        'o': ['–æ', 'Œø', '√∂', '√≤', '√≥', '√¥', '√µ', '√∏', '≈ç', '‚óã', '‚óè', '‚óØ', '‚≠ï'],
        'i': ['—ñ', 'Œπ', '√Ø', '√¨', '√≠', '√Æ', 'ƒ´', '!', '|', '¬°'],
        'u': ['œÖ', '√º', '√π', '√∫', '√ª', '≈´', '¬µ'],
        'n': ['–∏', 'ŒΩ', '√±', '≈Ñ', '≈à', 'Œ∑'],
        's': ['—ï', 'œÉ', '≈õ', '≈°', '≈ü', '$'],
        't': ['—Ç', 'œÑ', '≈£', '≈•', '‚Ä†'],
        'r': ['–≥', 'œÅ', '≈ô', '≈ï'],
        'p': ['—Ä', 'œÄ', '√æ'],
        'c': ['—Å', '√ß', 'ƒá', 'ƒç', '¬©'],
        'h': ['–Ω', 'Œ∑', 'ƒß'],
        'x': ['—Ö', 'œá', '√ó', '‚úó', '‚úò'],
        'b': ['–≤', 'Œ≤', '—ä'],
        'k': ['Œ∫', 'ƒ∑'],
        'y': ['—É', 'œà', '√Ω', '√ø'],
        'm': ['–º', 'Œº'],
        'l': ['≈Ç', 'Œª', '|'],
        'w': ['œâ', '·∫Ö'],
        'd': ['Œ¥', 'ƒë'],
        'f': ['œÜ', '∆í'],
        'g': ['Œ≥', 'ƒü'],
        'j': ['—ò'],
        'q': ['Œ∏'],
        'v': ['ŒΩ'],
        'z': ['Œ∂', '≈æ', '≈∫', '≈º'],
    }
    
    DECORATORS = [
        ('‚úß', '‚úß'), ('‚ô¶', '‚ô¶'), ('‚ñ≤', '‚ñ≤'), ('‚ô°', '‚ô°'), ('‚òÜ', '‚òÜ'), ('‚òÖ', '‚òÖ'),
        ('‚ö°', '‚ö°'), ('üí•', 'üí•'), ('üî•', 'üî•'), ('‚≠ê', '‚≠ê'), ('üåü', 'üåü'),
        ('‚ú®', '‚ú®'), ('üí´', 'üí´'), ('üî∏', 'üî∏'), ('üî∑', 'üî∑'), ('‚ñ£', '‚ñ£'),
        ('‚ñ¢', '‚ñ¢'), ('‚ñ¶', '‚ñ¶'), ('‚ñß', '‚ñß'), ('‚ñ®', '‚ñ®'), ('‚ñ©', '‚ñ©'),
        ('‚òæ', '‚òΩ'), ('üåô', 'üåô'), ('‚óâ', '‚óâ'), ('‚óè', '‚óè'), ('‚ñ™', '‚ñ™'),
        ('‚óá', '‚óá'), ('‚ô§', '‚ô§'), ('‚òØ', '‚òØ'), ('‚ùñ', '‚ùñ'), ('‚óÜ', '‚óÜ'),
    ]
    
    FONT_STYLES = {
        'bold': {
            'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
            'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
            'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
            'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
        },
        'italic': {
            'a': 'ùíÇ', 'b': 'ùíÉ', 'c': 'ùíÑ', 'd': 'ùíÖ', 'e': 'ùíÜ', 'f': 'ùíá', 'g': 'ùíà',
            'h': 'ùíâ', 'i': 'ùíä', 'j': 'ùíã', 'k': 'ùíå', 'l': 'ùíç', 'm': 'ùíé', 'n': 'ùíè',
            'o': 'ùíê', 'p': 'ùíë', 'q': 'ùíí', 'r': 'ùíì', 's': 'ùíî', 't': 'ùíï', 'u': 'ùíñ',
            'v': 'ùíó', 'w': 'ùíò', 'x': 'ùíô', 'y': 'ùíö', 'z': 'ùíõ'
        },
        'script': {
            'a': 'ùì™', 'b': 'ùì´', 'c': 'ùì¨', 'd': 'ùì≠', 'e': 'ùìÆ', 'f': 'ùìØ', 'g': 'ùì∞',
            'h': 'ùì±', 'i': 'ùì≤', 'j': 'ùì≥', 'k': 'ùì¥', 'l': 'ùìµ', 'm': 'ùì∂', 'n': 'ùì∑',
            'o': 'ùì∏', 'p': 'ùìπ', 'q': 'ùì∫', 'r': 'ùìª', 's': 'ùìº', 't': 'ùìΩ', 'u': 'ùìæ',
            'v': 'ùìø', 'w': 'ùîÄ', 'x': 'ùîÅ', 'y': 'ùîÇ', 'z': 'ùîÉ'
        },
        'double': {
            'a': 'ùïí', 'b': 'ùïì', 'c': 'ùïî', 'd': 'ùïï', 'e': 'ùïñ', 'f': 'ùïó', 'g': 'ùïò',
            'h': 'ùïô', 'i': 'ùïö', 'j': 'ùïõ', 'k': 'ùïú', 'l': 'ùïù', 'm': 'ùïû', 'n': 'ùïü',
            'o': 'ùï†', 'p': 'ùï°', 'q': 'ùï¢', 'r': 'ùï£', 's': 'ùï§', 't': 'ùï•', 'u': 'ùï¶',
            'v': 'ùïß', 'w': 'ùï®', 'x': 'ùï©', 'y': 'ùï™', 'z': 'ùï´'
        },
        'fullwidth': {
            'a': 'ÔΩÅ', 'b': 'ÔΩÇ', 'c': 'ÔΩÉ', 'd': 'ÔΩÑ', 'e': 'ÔΩÖ', 'f': 'ÔΩÜ', 'g': 'ÔΩá',
            'h': 'ÔΩà', 'i': 'ÔΩâ', 'j': 'ÔΩä', 'k': 'ÔΩã', 'l': 'ÔΩå', 'm': 'ÔΩç', 'n': 'ÔΩé',
            'o': 'ÔΩè', 'p': 'ÔΩê', 'q': 'ÔΩë', 'r': 'ÔΩí', 's': 'ÔΩì', 't': 'ÔΩî', 'u': 'ÔΩï',
            'v': 'ÔΩñ', 'w': 'ÔΩó', 'x': 'ÔΩò', 'y': 'ÔΩô', 'z': 'ÔΩö'
        }
    }
    
    @classmethod
    def generate_variants(cls, base_nick: str, count: int = 50) -> list[str]:
        base_nick = base_nick.lower()
        variants = [base_nick]
        
        for _ in range(count - 1):
            variant_type = random.choice(['unicode', 'decorated', 'styled', 'mixed', 'spaced'])
            
            if variant_type == 'unicode':
                variant = cls._apply_unicode_replacements(base_nick)
            elif variant_type == 'decorated':
                variant = cls._apply_decorators(base_nick)
            elif variant_type == 'styled':
                variant = cls._apply_font_style(base_nick)
            elif variant_type == 'mixed':
                variant = cls._apply_mixed_style(base_nick)
            else:
                variant = cls._apply_spaced_style(base_nick)
            
            if variant and variant not in variants:
                variants.append(variant)
        
        return variants
    
    @classmethod
    def _apply_unicode_replacements(cls, nick: str) -> str:
        result = ""
        for char in nick:
            if char.lower() in cls.UNICODE_REPLACEMENTS:
                replacement = random.choice(cls.UNICODE_REPLACEMENTS[char.lower()])
                result += replacement
            else:
                result += char
        return result
    
    @classmethod
    def _apply_decorators(cls, nick: str) -> str:
        left, right = random.choice(cls.DECORATORS)
        return f"{left}{nick}{right}"
    
    @classmethod
    def _apply_font_style(cls, nick: str) -> str:
        style = random.choice(list(cls.FONT_STYLES.keys()))
        font_map = cls.FONT_STYLES[style]
        
        result = ""
        for char in nick:
            if char.lower() in font_map:
                result += font_map[char.lower()]
            else:
                result += char
        return result
    
    @classmethod
    def _apply_mixed_style(cls, nick: str) -> str:
        base = cls._apply_unicode_replacements(nick)
        if random.choice([True, False]):
            base = cls._apply_decorators(base)
        return base
    
    @classmethod
    def _apply_spaced_style(cls, nick: str) -> str:
        spacers = ['‚ö°', '‚ú¶', '‚óè', '‚óã', '‚óá', '‚ô¶', '‚ñ™', '‚ñ´', '‚ó¶', '‚Ä¢']
        spacer = random.choice(spacers)
        
        if len(nick) <= 2:
            return f"{spacer}{nick}{spacer}"
        
        result = spacer
        for i, char in enumerate(nick):
            result += char
            if i < len(nick) - 1:
                result += spacer
        result += spacer
        
        return result

class NameChanger:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.business_connection_id: Optional[str] = None
        self.name_change_task: Optional[asyncio.Task] = None
        self.current_interval = Config.MIN_INTERVAL
        self.nick_variants = NickGenerator.generate_variants(Config.BASE_NICK, 100)
        logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.nick_variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è '{Config.BASE_NICK}'")
    
    def is_rate_limit_error(self, error_text: str) -> bool:
        rate_limit_keywords = ["too many requests", "rate limit", "flood", "429", "retry after"]
        return any(keyword in str(error_text).lower() for keyword in rate_limit_keywords)
    
    def increase_interval(self) -> None:
        if self.current_interval < Config.MAX_INTERVAL:
            old_interval = self.current_interval
            self.current_interval = min(self.current_interval + Config.INTERVAL_STEP, Config.MAX_INTERVAL)
            logger.info(f"üìà –£–≤–µ–ª–∏—á–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å {old_interval:.1f}—Å –¥–æ {self.current_interval:.1f}—Å")
    
    def reset_interval(self) -> None:
        self.current_interval = Config.MIN_INTERVAL
        logger.info(f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±—Ä–æ—à–µ–Ω –¥–æ {self.current_interval:.1f}—Å")
    
    async def set_business_name_direct(self, nick: str) -> dict:
        url = f"https://api.telegram.org/bot{Config.API_TOKEN}/setBusinessAccountName"
        payload = {
            "business_connection_id": self.business_connection_id,
            "first_name": nick,
            "name": nick
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                result = await response.json()
                logger.info(f"üåê –ü—Ä—è–º–æ–π API –æ—Ç–≤–µ—Ç: {result}")
                return result
    
    async def try_change_name(self, nick: str) -> bool:
        try:
            result = await self.bot(SetBusinessAccountName(
                business_connection_id=self.business_connection_id,
                name=nick,
                first_name=nick
            ))
            
            if result:
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ aiogram")
                return True
                
        except Exception as api_e:
            if self.is_rate_limit_error(str(api_e)):
                logger.warning(f"‚õî Rate limit —á–µ—Ä–µ–∑ aiogram: {api_e}")
                self.increase_interval()
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ aiogram: {api_e}")
            
            try:
                direct_result = await self.set_business_name_direct(nick)
                
                if direct_result.get('ok'):
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API")
                    return True
                elif self.is_rate_limit_error(str(direct_result)):
                    logger.warning("‚õî Rate limit –∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API")
                    self.increase_interval()
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ API: {direct_result}")
                    
            except Exception as direct_e:
                if self.is_rate_limit_error(str(direct_e)):
                    logger.warning("‚õî Rate limit –ø—Ä—è–º–æ–π API exception")
                    self.increase_interval()
                else:
                    logger.error(f"‚ùå Exception –ø—Ä—è–º–æ–≥–æ API: {direct_e}")
        
        return False
    
    async def change_name_loop(self) -> None:
        logger.info(f"–ó–∞–ø—É—â–µ–Ω —Ü–∏–∫–ª —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –Ω–∏–∫–∞: '{Config.BASE_NICK}'")
        logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {Config.MIN_INTERVAL}—Å ‚Üí {Config.MAX_INTERVAL}—Å")
        
        change_count = 0
        
        while True:
            try:
                if not self.business_connection_id:
                    logger.warning("ID –±–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    await asyncio.sleep(self.current_interval)
                    continue
                
                nick = random.choice(self.nick_variants)
                change_count += 1
                
                logger.info(f"üîÑ [{change_count}] –ú–µ–Ω—è—é –Ω–∞: '{nick}' | –ò–Ω—Ç–µ—Ä–≤–∞–ª: {self.current_interval:.1f}—Å")
                
                success = await self.try_change_name(nick)
                
                if success:
                    self.increase_interval()
                    
            except Exception as e:
                logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            
            progress = (self.current_interval - Config.MIN_INTERVAL) / (Config.MAX_INTERVAL - Config.MIN_INTERVAL) * 100
            logger.info(f"‚è∞ –ñ–¥—É {self.current_interval:.1f}—Å... (–ø—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%)")
            await asyncio.sleep(self.current_interval)
    
    def start_task(self) -> None:
        if self.name_change_task and not self.name_change_task.done():
            self.name_change_task.cancel()
        
        self.reset_interval()
        self.name_change_task = asyncio.create_task(self.change_name_loop())
        logger.info("–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏")
    
    def stop_task(self) -> None:
        if self.name_change_task and not self.name_change_task.done():
            self.name_change_task.cancel()
            logger.info("–ó–∞–¥–∞—á–∞ —Å–º–µ–Ω—ã –∏–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def shutdown(self) -> None:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.stop_task()
        
        if self.name_change_task:
            try:
                await self.name_change_task
            except asyncio.CancelledError:
                pass

bot = Bot(token=Config.API_TOKEN)
dp = Dispatcher()
name_changer = NameChanger(bot)

@dp.business_connection()
async def handle_business_connection(connection: BusinessConnection):
    name_changer.business_connection_id = connection.id
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç–∞: {connection.id}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {connection.user.first_name} (@{connection.user.username})")
    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection.is_enabled}")
    
    if connection.is_enabled:
        name_changer.start_task()
    else:
        logger.warning("–ë–∏–∑–Ω–µ—Å-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
        name_changer.stop_task()

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"Bot token: {Config.API_TOKEN[:10]}...")
    logger.info(f"–ë–∞–∑–æ–≤—ã–π –Ω–∏–∫: '{Config.BASE_NICK}'")
    logger.info(f"–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–º–µ–Ω—ã: {Config.MIN_INTERVAL}—Å ‚Üí {Config.MAX_INTERVAL}—Å")
    
    try:
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{bot_info.username}")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await name_changer.shutdown()
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")